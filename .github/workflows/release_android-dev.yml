name: Release Android-dev
on:
  # 手动触发
  workflow_dispatch:
    inputs:
      branch:
        description: '要构建的分支'
        required: true
        default: 'dev'
        type: string
      tag:
        description: 'Release版本标签 (例如: v1.0.0)'
        required: true
        default: 'v1.0.0'
        type: string

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      # 检出代码
      - uses: actions/checkout@v5.0.0
        with:
          # 指定拉取的分支
          ref: ${{ github.event.inputs.branch }}

      # 设置flutter环境
      - uses: subosito/flutter-action@v2.14.0
        with:
          flutter-version: 3.27.4
          channel: stable

      # 设置JDK
      - name: Set up JDK
        uses: actions/setup-java@v5.0.0
        with:
          distribution: 'zulu'
          java-version: 17

      # 获取flutter依赖
      - run: flutter pub get

      # 从GitHub Secrets中恢复签名keystore
      - name: Restore signing keystore
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/hlbmerge.jks
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      # 从GitHub Secrets中恢复keystore.properties
      - name: Generate keystore.properties
        run: |
          echo "storeFile=./hlbmerge.jks" > android/keystore.properties
          echo "storePassword=${KEYSTORE_PASSWORD}" >> android/keystore.properties
          echo "keyAlias=${KEY_ALIAS}" >> android/keystore.properties
          echo "keyPassword=${KEY_PASSWORD}" >> android/keystore.properties
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # 构建APK - 智能镜像切换方案
      - name: Build APK with smart mirror switching
        run: |
          cd android
          
          # 备份原始build.gradle
          cp build.gradle build.gradle.backup
          
          # 创建使用官方源的build.gradle模板
          cat > build.gradle.official << 'EOF'
          buildscript {
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.3.0'
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF
          
          # 测试镜像健康状态函数
          test_mirror_health() {
            echo "测试镜像健康状态..."
            local mirrors=(
              "https://maven.aliyun.com/repository/public"
              "https://maven.aliyun.com/repository/google"
              "https://repo1.maven.org/maven2"
              "https://maven.google.com"
            )
          
            for mirror in "${mirrors[@]}"; do
              if curl --connect-timeout 5 --max-time 10 --head --silent --fail "$mirror" > /dev/null; then
                echo "✓ $mirror 可用"
                if [[ $mirror == *"aliyun"* ]]; then
                  return 0  # 阿里云可用
                else
                  return 1  # 只有官方源可用
                fi
              else
                echo "✗ $mirror 不可用"
              fi
            done
            return 2  # 所有镜像都不可用
          }
          
          # 检测镜像状态
          test_mirror_health
          mirror_status=$?
          
          case $mirror_status in
            0)
              echo "使用阿里云镜像"
              # 使用原始配置
              ;;
            1)
              echo "切换到官方镜像"
              # 替换阿里云镜像为官方镜像
              sed -i 's|https://maven.aliyun.com/repository/public||g' build.gradle
              sed -i 's|https://maven.aliyun.com/repository/google||g' build.gradle
              # 确保包含官方仓库
              if ! grep -q "google()" build.gradle; then
                  sed -i '/repositories {/a\        google()\n        mavenCentral()' build.gradle
              fi
              ;;
            2)
              echo "所有镜像都不可用，使用官方配置模板"
              cp build.gradle.official build.gradle
              ;;
          esac
          
          cd ..
          
          # 设置Gradle参数
          export GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.internal.http.connectionTimeout=120000 -Dorg.gradle.internal.http.socketTimeout=120000"
          
          # 清理项目
          echo "清理项目..."
          flutter clean
          flutter pub get
          
          # 构建函数，带重试机制
          build_with_retry() {
            for attempt in {1..3}; do
              echo "构建尝试 $attempt/3"
              if flutter build apk --release --split-per-abi; then
                echo "构建成功!"
                return 0
              else
                echo "构建失败"
                if [ $attempt -lt 3 ]; then
                  echo "等待30秒后重试..."
                  sleep 30
                  # 如果是第一次失败，尝试强制切换到官方源
                  if [ $attempt -eq 1 ]; then
                    echo "尝试强制切换到官方源..."
                    cd android
                    sed -i 's|https://maven.aliyun.com/repository/public||g' build.gradle
                    sed -i 's|https://maven.aliyun.com/repository/google||g' build.gradle
                    # 确保包含官方仓库
                    if ! grep -q "google()" build.gradle; then
                        sed -i '/repositories {/a\        google()\n        mavenCentral()' build.gradle
                    fi
                    cd ..
                    flutter clean
                    flutter pub get
                  fi
                else
                  echo "所有重试都失败了"
                  return 1
                fi
              fi
            done
          }
          
          # 执行构建
          build_with_retry

      # 创建Release并上传APK文件
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          # 使用手动输入的标签 - 这样就能分隔不同版本了
          tag_name: ${{ github.event.inputs.tag }}
          generate_release_notes: true
          name: Release ${{ github.event.inputs.tag }}
          replace: true
          files: |
            build/app/outputs/flutter-apk/app-x86_64-release.apk
            build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 合并上传所有APK文件为一个Artifact，设置3天后自动删除
      - name: Upload All APKs as Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: app-release-apks
          path: build/app/outputs/flutter-apk/
          # 设置3天后自动删除
          retention-days: 3